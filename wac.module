<?php

require_once(drupal_get_path('module', 'wac') . '/includes/wac.pathauto.inc');

function wac_permission() {
  return array(
    'view web accessable charts' => array(
      'title' => t('View web accessible charts'),
      'description' => t('View any published charts or own unpublished charts created by the Web Accesible Charts module.'),
    ),
    'create web accessible charts' => array(
      'title' => t('Create Web Accessible Charts'),
      'description' => t('Basic permission for creating charts.')
    ),
    'publish web accessible charts' => array(
      'title' => t('Publish Web Accessible Charts'),
      'description' => t('Permission just to publish or unpublish charts.')
    ),
    'edit own web accessible charts' => array(
      'title' => t('Edit own web accessible charts'),
    ),
    'delete own web accessible charts' => array(
      'title' => t('Delete own web accessible charts'),
    ),
    'administer web accessible charts' => array(
      'title' => t('Administer web accessible charts.'),
      'description' => t('Create and manipulate charts created by the Web Accesible Charts module.'),
    ),
  );
}

function wac_entity_info() {
  $info = array();
  $info['chart'] = array(
    'label' => t('Chart'),
    'base table' => 'wac',
    'entity keys' => array(
      'id' => 'cid',
      'bundle' => 'type',
      'label' => 'title'
    ),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'module' => 'wac',
    'uri callback' => 'wac_entity_info_uri',
    'fieldable' => TRUE,
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view_modes' => array(
      'full' => array(
        'label' => t('Full chart'),
        'custom settings' => FALSE,
      ),
    ),
    // Despite not being listed anywhere entity_access checks for a manditory access callback on the instance (not the bundle).
    'access callback' => 'wac_entity_access_check',
  );
  $bundles = wac_get_chart_types();
  foreach ($bundles AS $key => $name) {
    $info['chart']['bundles'][$key] = array(
      'label' => $name['title'],
      'admin' => array(
        'path' => 'admin/structure/chart/manage/%wac_chart_bundle',
        'real path' => 'admin/structure/chart/manage/' . $key,
        'bundle argument' => 4,
        'access callback' => 'wac_entity_access_check',
      ), 
    );
  }
  return $info;
}

function wac_entity_info_uri($entity) {
 return array(
    'path' => 'chart/' . $entity->cid,
  );
}

function wac_menu() {
  $items = array();
  $items['admin/content/charts'] = array(
    'title' => 'Charts',
    'page callback' => 'wac_admin_charts',
    'access arguments' => array('administer web accessible charts'), 
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_LOCAL_TASK
  );
  $items['chart/%wac_chart_entity'] = array(
    'title' => 'Chart',
    'page callback' => 'wac_chart_entity_view',
    'page arguments' => array(1),
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'view'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['chart/%wac_chart_entity/view'] = array(
    'title' => 'View Chart',
    'page callback' => 'wac_chart_entity_view',
    'page arguments' => array(1),
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'view'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['chart/add'] = array(
    'title' => 'Create a Web Accessible Chart',
    'page callback' => 'wac_chart_add_page',
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'add'),
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_NORMAL_ITEM
  );
  $items['chart/add/%wac_chart_bundle'] = array(
    'title' => 'Chart',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wac_chart_add', 2),
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'add'),
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_NORMAL_ITEM
  );
  $items['chart/%wac_chart_entity/edit'] = array(
    'title' => 'Edit Chart',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wac_chart_add', 1),
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'edit'),
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  ); 
  $items['chart/%wac_chart_entity/delete'] = array(
    'title' => 'Delete Chart',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wac_chart_delete_confirm', 1),
    'access callback' => 'wac_access_check',
    'access arguments' => array(1, 'delete'),
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );
  $items['admin/structure/charts'] = array(
    'title' => 'Chart Types',  
    'description' => 'Manage chart types, add and edit fields and manage displays.',
    'page callback' => 'wac_chart_admin_types_page',
    'access arguments' => array('administer web accessible charts'),
    'file' => 'wac.admin.inc',
    'file path' => drupal_get_path('module', 'wac') . '/includes',
    'type' => MENU_NORMAL_ITEM
  );
  $items['chart/help'] = array(
    'title' => 'Web Accessible Charts (WAC) Help',
    'page callback' => 'wac_chart_help',
    'access callback' => 'wac_entity_access_check',
    'access arguments' => array(1, 'view'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function wac_access_check($chart, $op) {
  if (user_access('administer web accessible charts')) {
    return TRUE;
  }
  global $user;
  switch($op) {
    case 'view':
      if ($chart->status == 1 || ($chart->status != 1 && $chart->uid == $user->uid)) {
        return user_access('view web accessable charts');
      }
    break;
    case 'add':
      return user_access('create web accessible charts');
    break;
    case 'edit':
      if ($chart->uid == $user->uid) {
        return user_access('edit own web accessible charts');
      }
    break;
    case 'delete':
      if ($chart->uid == $user->uid) {
        return user_access('delete own web accessible charts'); 
      }
    break;
  }
}

function wac_entity_access_check() {
  watchdog('pundant', 'flooom');
  if (user_access('view web accessable charts') || user_access('administer web accessible charts')) {
    return TRUE;
  }
}

function wac_chart_help() {
  return array('#theme' => 'wac_help');
}

function wac_d3_lib() {
  $lib = array(
    'title' => 'D3',
    'website' => 'http://d3js.org',
    'version' => '3.3.13',
    'js' => array(
      'sites/all/libraries/d3/d3.min.js' => array(),
    )
  );
  return variable_get('wac_d3_lib', $lib);
}

function wac_library() {
  $lib = wac_d3_lib();
  return array('d3' => $lib); 
}

function wac_entity_insert($entity, $type) {
  if ($type == 'chart' && module_exists('pathauto')) {
    wac_update_alias($entity, 'insert'); 
  }
}

function wac_entity_update($entity, $type) {
  if ($type == 'chart' && module_exists('pathauto')) {
    wac_update_alias($entity, 'update');
  }
}

function wac_entity_delete($entity, $type) {
  if ($type == 'chart' && module_exists('pathauto')) {
    pathauto_entity_path_delete_all('my_entity', $entity, "my_entity/{$entity->pid}");
  }
}

/**
 * We provide two chart theme functions wac_chart_entity for viewing the whole fielded entity.
 *   and wac_chart for rendering purely the chart visualization.
 */
function wac_theme($existing, $type, $theme, $path) {
  return array(
    'wac_chart_entity' => array(
      'path' => $path . '/theme',
      'template' => 'wac-chart-entity',
      'render element' => 'elements'
    ),
    'wac_chart' => array(
      'path' => $path . '/theme',
      'template' => 'wac-chart',
      'render element' => 'elements'
    ),
    'wac_help' => array(
      'path' => $path . '/theme',
      'template' => 'wac-help',
      'render element' => 'elements'
    )
  ); 
}

function template_preprocess_wac_chart_entity(&$variables) {
  $chart = $variables['elements']['#chart'];
  $langcode = $variables['elements']['#language'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  // Long last add the chart itself.
  $variables['content']['chart'] = array(
    '#theme' => 'wac_chart',
    '#chart' => $chart,
    '#language' => $langcode
  );
  // Make the field variables available with the appropriate language.
  field_attach_preprocess('chart', $chart, $variables['content'], $variables);
  $variables['theme_hook_suggestions'][] = 'wac-chart-entity__' . $chart->type;
  $variables['theme_hook_suggestions'][] = 'wac-chart-entity__' . $chart->cid;
}

function template_preprocess_wac_chart(&$variables) {
  $chart = $variables['elements']['#chart'];
  $langcode = $variables['elements']['#language'];
  $variables['chart_id'] = 'wac-' . $chart->cid;
  // For D3 do it this way so we can set the error easily.
  wac_chart_add_d3_library();
  // All we need to do is include a bunch of files settings
  $path = drupal_get_path('module', 'wac');
  drupal_add_css($path . '/theme/css/wac.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  drupal_add_js($path . '/theme/js/class.js', array('type' => 'file', 'group' => JS_DEFAULT)); 
  drupal_add_js($path . '/theme/js/chart-base.js', array('type' => 'file', 'group' => JS_DEFAULT)); 
  switch($chart->type) {
    case 'bar':
      $chart->js_class = 'ChartBar';
      drupal_add_js($path . '/theme/js/chart-bar.js', array('type' => 'file', 'group' => JS_DEFAULT));
      break;
    case 'line':
      $chart->js_class = 'ChartLine';
      drupal_add_js($path . '/theme/js/chart-line.js', array('type' => 'file', 'group' => JS_DEFAULT));
      break;
    case 'pie':
      $chart->js_class = 'ChartPie';
      drupal_add_js($path . '/theme/js/chart-pie.js', array('type' => 'file', 'group' => JS_DEFAULT));
      break;
  }
  drupal_add_js($path . '/theme/js/chart-behavior.js', array('type' => 'file', 'group' => JS_DEFAULT));
  wac_chart_add_settings($chart, $variables['chart_id'], $langcode);
}

function wac_chart_add_settings($chart, $id, $l) {
  $settings = array();
  $settings['id'] = $id;
  $settings['class'] = $chart->js_class;
  // Dictionary acts as lookup for chart type.
  $settings['dictionary'] = array();
  if (!function_exists('wac_chart_fields')) {
    require_once(drupal_get_path('module', 'wac') . '/includes/wac.fields.inc');
  }
  $fields = wac_chart_fields();
  // We don't need the file
  unset($fields[$chart->type]['data_file']);
  $fields = array_keys($fields[$chart->type]);
  foreach($fields AS $key) {
    $settings['dictionary'][$key] = array();
    if (!empty($chart->{$key}[$l])) {
      foreach ($chart->{$key}[$l] AS $item) {
        $settings['dictionary'][$key][] = $item['value'];
      }
    }
  }
  $settings['dictionary']['title'] = $chart->title;
  $settings['dictionary']['type'] = $chart->type;
  // Data contains the actual data to render.
  $settings['data'] = wac_get_data_from_file($chart->data_file[$l][0]);
  drupal_add_js(array('wac' => array($settings)), array('type' => 'setting'));
}

function wac_chart_entity_view($chart) {
  return wac_chart_view_multiple(array($chart->cid => $chart));
}

function wac_chart_view_multiple($charts, $view_mode = 'full', $langcode = NULL) {
  entity_prepare_view('wac_chart', $charts, $langcode);
  field_attach_prepare_view('wac_chart', $charts, $view_mode, $langcode);
  $build = array();
  foreach ($charts as $chart) {
    $build['charts'][$chart->cid] = wac_chart_view($chart, $view_mode, $langcode);
  }
  return $build;
}

function wac_chart_view($chart, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    // @TODO investigate what should be done here.
    $langcode = LANGUAGE_NONE;
  }
  wac_chart_build_content($chart, $view_mode, $langcode);
  $build = $chart->content;
  unset($chart->content);
  $build += array(
    '#theme' => 'wac_chart_entity',
    '#chart' => $chart,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  $type = 'chart';
  drupal_alter(array('chart_view', 'entity_view'), $build, $type);
  return $build;
}

function wac_chart_build_content($chart, $view_mode, $langcode) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $chart->content = array();
  // Allow modules to change the view mode.
  $context = array(
    'entity_type' => 'chart',
    'entity' => $chart,
    'langcode' => $langcode,
  );
  // Let other plugins change view mode
  drupal_alter('entity_view_mode', $view_mode, $context);
  // Build fields
  field_attach_prepare_view('chart', array($chart->cid => $chart), $view_mode, $langcode);
  entity_prepare_view('node', array($chart->cid => $chart), $langcode);
  $chart->content += field_attach_view('chart', $chart, $view_mode, $langcode);
  // Let folks alter chart with hook_entity_view
  module_invoke_all('entity_view', $chart, 'chart', $view_mode, $langcode);
  $chart->content += array('#view_mode' => $view_mode);
}

function wac_chart_entity_delete($chart) {
  $message = t('Deleted chart: ' . $chart->title);
  entity_delete('chart', $chart->cid);
  drupal_set_message($message, 'status');
  drupal_goto('<front>');
}

function wac_chart_entity_load($cid) {
  $chart = entity_load('chart', array((int) $cid));
  return !empty($chart) && !empty($chart[$cid]) ? $chart[$cid] : FALSE;
}

function wac_chart_bundle_load($type) {
  $query = db_select('wac_type', 'types');
  $query->fields('types', array('title', 'type'));
  $query->condition('type', $type, '=');
  $resource = $query->execute();
  $result = $resource->fetchAll();
  if (!empty($result)) {
    return $result[0];
  }
  return FALSE;
}

function wac_chart_type_title($type) {
  return $type->title;
}

function wac_get_chart_types() {
  return array(
    'bar' => array(
      'title' => t('Bar Chart'),
      'description' => t('Create a simple bar chart with two axes. A bar graph is a chart that uses either horizontal or vertical bars to show comparisons among categories. One axis of the chart shows the specific categories being compared, and the other axis represents a discrete value.')
    ),
    'line' => array(
      'title' => t('Line Chart'),
      'description' => t('Create a simple line chart with two axes. A line chart or line graph is a type of chart which displays information as a series of data points called "markers" connected by straight line segments.')
    ),
    'pie' => array(
      'title' => t('Pie Chart'), 
      'description' => t('Create a simple pie chart. A pie chart (or a circle chart) is a circular statistical graphic, which is divided into sectors to illustrate numerical proportion.')
    )
  );
}

function wac_chart_add_d3_library() {
  $lib = wac_d3_lib();
  $lib_js = array_keys($lib['js']);
  $path = $lib_js[0];
  if (!file_exists($path)) {
    drupal_set_message(t("The D3 library was missing from your site's libraries directory. Please download D3 and place it in !path.", array('!path' => $path)), 'error');
  }
  else {
    drupal_add_library('wac', 'd3');
  }
}

function wac_get_data_from_file($file) {
  if (is_array($file)) {
    $file = (object) $file;
  }
  $path = file_create_url($file->uri);
  $ext = substr($path, strrpos($path, '.') + 1, strlen($path));
  $handle = fopen($path, "r");
  if ($handle !== FALSE) {
    switch ($ext) {
      case 'csv':
        $data = wac_get_data_from_delimiter_seperated_value_file($handle, ','); 
        break;
      case 'tsv':
        $data = wac_get_data_from_delimiter_seperated_value_file($handle, '	');
        break;
      case 'json':
        $data = wac_get_data_from_json_file($handle);
        break;
    }
    fclose($handle);
  }
  return $data;
}

function wac_get_data_from_delimiter_seperated_value_file($handle, $delimiter) {
  $output = array();
  while (($data = fgetcsv($handle, 0, $delimiter)) !== FALSE) {
    $output[] = $data;
  }
  return $output;
}

function wac_get_data_from_json_file($handle) {
  while (!feof($handle)) {
    $data = fgets($handle);
    return (array) json_decode($handle);
  }
  return FALSE;
}

function wac_get_formats() {
  return array(
    'numeric' => t('Numeric'),
    'percent' => t('Percent'),
    'us_dollars' => t('US Dollars'),
  );
}

function wac_chart_create($type) {
  $chart = new StdClass();
  $chart->type = $type;
  $chart->is_new = TRUE;
  return $chart;
}

function wac_token_info() {
  $type = array(
    'name' => t('Web Accessible Charts'),
    'description' => t('Tokens related to individual charts.'),
    'needs-data' => 'chart',
  );
  $chart['cid'] = array(
    'name' => t("Chart ID"),
    'description' => t("The unique ID of the chart."),
  );
  $chart['title'] = array(
    'name' => t("Title"),
    'description' => t("The title of the chart."),
  );
  $chart['type'] = array(
    'name' => t("Type"),
    'description' => t("The type of the chart."),
  );
  $chart['created'] = array(
    'name' => t("Date created"),
    'description' => t("The date the chart was posted."),
    'type' => 'date',
  );
  $chart['author'] = array(
    'name' => t("Author"),
    'description' => t("The author of the chart."),
    'type' => 'user',
  );
  return array(
    'types' => array('chart' => $type),
    'tokens' => array('chart' => $chart),
  );
}

function wac_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'chart') {
    $chart = $data['chart'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'cid':
          $replacements[$original] = $chart->cid;
          break;
        case 'title':
          $replacements[$original] = $chart->title;
          break;
        case 'type':
          $replacements[$original] = $chart->type;
          break;
        case 'created':
          $replacements[$original] = $chart->created;
          break;
        case 'author':
          $account = user_load($chart->uid);
          $name = format_username($account);
          $replacements[$original] = $sanitize ? check_plain($name) : $name;
          break;
      }
    }
    if ($author_tokens = token_find_with_prefix($tokens, 'author')) {
      $author = user_load($chart->uid);
      $replacements += token_generate('user', $author_tokens, array('user' => $author), $options);
    }
    if ($created_tokens = token_find_with_prefix($tokens, 'created')) {
      $replacements += token_generate('date', $created_tokens, array('date' => $chart->created), $options);
    }
  }
  return $replacements;
}
